# This is a basic workflow to help you get started with MATLAB Actions

name: MATLAB Build

# Controls when the action will run. 
on: 
  push:                       # Runs on push events
  workflow_dispatch:          # Allows you to run this workflow manually from the Actions tab

env:
  MLM_LICENSE_TOKEN: ${{ secrets.MLM_LICENSE_TOKEN }}
  PRODUCT_LIST: MATLAB MATLAB_Test MATLAB_Compiler MATLAB_Compiler MATLAB_Compiler_SDK Optimization_Toolbox Global_Optimization_Toolbox Parallel_Computing_Toolbox MATLAB_Report_Generator

jobs:

  # This workflow contains two jobs called "test" and "compile-deployment"
  test:
    # This job will run for all the OS present in the matrix
    strategy:
      matrix:
        os: [ubuntu-latest]
        #os: [ubuntu-latest, windows-latest, macos-13]
     
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
  
    steps:
      - uses: actions/checkout@v4
       
      - name: Setup MATLAB on the GitHub Actions runner
        uses: matlab-actions/setup-matlab@v2
        with:
          cache: true
          products: ${{ env.PRODUCT_LIST }}
            
      - name: Start display server (required for building doc in MATLAB)
        run: |
          Xvfb :99 & 
          echo "DISPLAY=:99" >> $GITHUB_ENV
 
      - name: Run Test
        uses: matlab-actions/run-build@v2
        with:
          tasks: test
          
      - name: Junit Test Summary
        uses: test-summary/action@v2
        with:
           paths: "public/test-reports/junit.xml"

      - name: Upload Code Coverage report 
        uses: actions/upload-artifact@v4
        with:
           name: Code Coverage report
           path: public/code-coverage

      #- name: Publish Test Results
      #  uses: EnricoMi/publish-unit-test-result-action@v2
      #  if: always()
      #  with:
      #    files: |
      #      test-reports/junit.xml
      #    # code-coverage/cobertura-coverage.xml

  compile-deployment:
    
    strategy:
      matrix:
         os: [ubuntu-latest]

    needs: test

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup MATLAB on the GitHub Actions runner
        uses: matlab-actions/setup-matlab@v2
        with:
          cache: true
          products: ${{ env.PRODUCT_LIST }}
      - name: Start display server (required for building doc in MATLAB)
        run: |
          Xvfb :99 & 
          echo "DISPLAY=:99" >> $GITHUB_ENV
 
      - name: Build MPS Archive
        uses: matlab-actions/run-build@v2
        with:
          tasks: deployMPSArchive

      - name: Build WebApp Archive
        uses: matlab-actions/run-build@v2
        with:
          tasks: deployWebApp
          
      - name: Upload Production Server Archive 
        uses: actions/upload-artifact@v4
        with:
          name: Travel Man Production Server Archive 
          path: deploy/mpsArchive

      - name: Upload WebApp Server Archive 
        uses: actions/upload-artifact@v4
        with:
          name: Travel Man WebApp Server Archive 
          path: deploy/webapp  

      # Copy MPS archive to edison.mathworks-workshop.com by using scp
      - name: copy MPS file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: deploy/mpsArchive
          target: /home/ubuntu/samd/mps/apps/R2024b

      # Production Server doesn't read subfolder, we need to ssh into the machine 
      # and copy the cft to the right place

      - name: move MPS file
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: mv /home/ubuntu/samd/mps/apps/R2024b/deploy/mpsArchive/shortestTrip.ctf /home/ubuntu//samd/mps/apps/R2024b
 

      # Copy WebApp archive to edison.mathworks-workshop.com by using scp
      - name: copy WebApp file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: deploy/webapp
          target: /home/ubuntu/samd/webapp/apps   

  integrationTest:
    
    strategy:
      matrix:
         os: [ubuntu-latest]
    needs: compile-deployment 
    
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup MATLAB on the GitHub Actions runner
        uses: matlab-actions/setup-matlab@v2
        with:
          cache: true
          products: ${{ env.PRODUCT_LIST }}
      - name: Start display server (required for building doc in MATLAB)
        run: |
          Xvfb :99 & 
          echo "DISPLAY=:99" >> $GITHUB_ENV
      # Do integration test    
      - name: Integration Test
        uses: matlab-actions/run-build@v2
        with:
          tasks: integrationTest

#      - name: Publish Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        with:
#           files: "test-reports/junit.html"
 
 #     - name: Run un ${{ matrix.os }} with script
 #       uses: matlab-actions/run-command@v2
 #       with:
 #         command: myscript